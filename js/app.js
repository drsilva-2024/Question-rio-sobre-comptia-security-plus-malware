const startButton = document.getElementById('start-btn')
const nextButton = document.getElementById('next-btn')
const containerElement = document.getElementById('main-container')
const questionContainerElement = document.getElementById('question-container')
const questionElement = document.getElementById('question')
const answerButtonsElement = document.getElementById('answer-buttons')
const answerButtons = document.querySelector(".answrbtn")
let correctMessage = document.getElementById('correct-message')
let questionNumber = document.getElementById('question-number')
let results = document.getElementById('results')
let finalScore = document.getElementById('final-score');
let tally = 0

let shuffledQuestions, currentQuestionIndex

startButton.addEventListener('click', startGame)
nextButton.addEventListener('click', () => {
  currentQuestionIndex++
  setNextQuestion()
})

function startGame() {
  finalScore.classList.add('hide')
  startButton.classList.add('hide')
  containerElement.classList.remove('hide')
  finalScore.classList.remove('incorrect')
  finalScore.classList.remove('correct')
  shuffledQuestions = questions.sort(() => Math.random() - .5)
  currentQuestionIndex = 0
  questionContainerElement.classList.remove('hide')
  results.innerText = ''
  setNextQuestion()
}

function setNextQuestion() {
  resetState()
  showQuestion(shuffledQuestions[currentQuestionIndex])
}

function showQuestion(question) {
  questionElement.innerText = question.question
  let questionNum = currentQuestionIndex + 1
  questionNumber.innerText = "Question number " + questionNum + "/" + questions.length
  question.answers.forEach(answer => {
    const button = document.createElement('button')
    button.innerText = answer.text
    button.classList.add('btn')
    if (answer.correct) {
      button.dataset.correct = answer.correct
    }
    button.addEventListener('click', selectAnswer)
    answerButtonsElement.appendChild(button)
  })
}

function resetState() {
  clearStatusClass(document.body)
  nextButton.classList.add('hide')

  correctMessage.innerHTML = 'Choose Wisely'
  while (answerButtonsElement.firstChild) {
    answerButtonsElement.removeChild(answerButtonsElement.firstChild)
  }
}

function selectAnswer(e) {
  const selectedButton = e.target
  const correct = selectedButton.dataset.correct
  setStatusClass(document.body, correct)
  Array.from(answerButtonsElement.children).forEach(button => {
    setStatusClass(button, button.dataset.correct)
  })
  if (correct == 'true') {
    tally+=1
    console.log(tally + '/' + questions.length)
    correctMessage.classList.add('correct')
    correctMessage.innerHTML = ' Correct!'
    disableElement()
  } else {
    correctMessage.classList.add('incorrect')
    correctMessage.innerHTML = 'Incorrect'
    disableElement()
  }
  if (shuffledQuestions.length > currentQuestionIndex + 1) {
    nextButton.classList.remove('hide')
  } else {
    startButton.innerText = 'Restart'
    startButton.classList.remove('hide')
    finalScore.classList.remove('hide')
    score = Math.floor(tally/questions.length * 100)
    if (score <= 20) {
      results.innerText = "\rWow... pretty awful. You definately need more practice. \r\r You got " + tally + ' out of ' + questions.length + ' questions correct for a final score of'
      finalScore.innerText = score + '%'
      finalScore.classList.add('incorrect')
    } else if (score <= 50 && score > 20) {
      results.innerText = "\rNot good... You should practice more. \r\r You got " + tally + ' out of ' + questions.length + ' questions correct for a final score of'
      finalScore.innerText = score + '%'
      finalScore.classList.add('incorrect')
    } else if (score <= 70 && score > 50) {
      results.innerText = "\rNot good... You should practice more. \r\r You got " + tally + ' out of ' + questions.length + ' questions correct for a final score of'
      finalScore.innerText = score + '%'
      finalScore.classList.add('incorrect')
    } else if (score <= 90 && score > 70) {
      results.innerText = "\rNot bad! \r\r You got " + tally + ' out of ' + questions.length + ' questions correct for a final score of'
      finalScore.innerText = score + '%'
      finalScore.classList.add('correct')
    } else {
      results.innerText = "\rAwesome! You might be ready for the test! \r\r You got " + tally + ' out of ' + questions.length + ' questions correct for a final score of'
      finalScore.innerText = score + '%'
      finalScore.classList.add('correct')
    }
    tally = 0
  }
}

function disableElement() {
  Array.from(answerButtonsElement.children).forEach(button => {
    button.classList.add('disable')
    button.removeEventListener('click', selectAnswer)
  })
}

function setStatusClass(element, correct) {
  clearStatusClass(element)
  if (correct) {
    element.classList.add('correct')
  } else {
    element.classList.add('wrong')
  }
}

function clearStatusClass(element) {
  correctMessage.classList.remove('correct')
  correctMessage.classList.remove('incorrect')
  element.classList.remove('correct')
  element.classList.remove('wrong')
}

const questions = [
  {
    question: 'Which of the following is an example of spyware?',
    answers: [
      { text: 'Keylogger', correct: true },
      { text: 'Packet Sniffer', correct: false },
      { text: 'Vulnerability scanner', correct: false },
      { text: 'Computer Worm', correct: false }
    ]
  },
  {
    question: 'Software that displays advertisements is called:',
    answers: [
      { text: 'Adware', correct: true },
      { text: 'Spyware', correct: false },
      { text: 'Ransomeware', correct: false },
      { text: 'Keylogger', correct: false }
    ]
  },
  {
    question: 'A collection of software tools used by a hacker to mask intrusion and obtain administrator-level access to a computer or computer network is known as:',
    answers: [
      { text: 'NMap', correct: false },
      { text: 'Spyware', correct: false },
      { text: 'Backdoor', correct: true },
      { text: 'Trojan', correct: false }
    ]
  },
  {
    question: 'A type of software that performs unwanted and harmful actions in disguise of a legitimate and useful program is known as a Trojan horse. This type of malware may act like a legitimate program and have all the expected functionalities, but apart from that it will also contain a portion of malicious code that the user is unaware of.',
    answers: [
      { text: 'True', correct: true },
      { text: 'False', correct: false }
    ]
  },
  {
    question: 'A standalone malicious computer program that typically propagates itself over a computer network to adversely affect system resources and network bandwidth is called:',
    answers: [
      { text: 'Spyware', correct: false },
      { text: 'Adware', correct: false },
      { text: 'Trojan', correct: false },
      { text: 'Worm', correct: true }
    ]
  },
  {
    question: 'Which of the terms listed below refers to an example of a crypto-malware?',
    answers: [
      { text: 'Backdoor', correct: false },
      { text: 'Ransomeware', correct: true },
      { text: 'Rootkit', correct: false },
      { text: 'Keylogger', correct: false }
    ]
  },
  {
    question: 'Malicious code activated by a specific event is called:',
    answers: [
      { text: 'Dropper', correct: false },
      { text: 'Retrovirus', correct: false },
      { text: 'Logic Bomb', correct: true },
      { text: 'Poodle', correct: false }
    ]
  },
  {
    question: 'Which of the terms listed below applies to a collection of intermediary compromised systems that are used as a platform for a DDoS attack?',
    answers: [
      { text: 'Botnet', correct: true },
      { text: 'Quarantine Network', correct: false },
      { text: 'Honeypot', correct: false },
      { text: 'Honeynet', correct: false }
    ]
  },
  {
    question: 'A malware-infected networked host under remote control of a hacker is commonly referred to as:',
    answers: [
      { text: 'Worm', correct: false },
      { text: 'Trojan', correct: false },
      { text: 'Bot', correct: true },
      { text: 'Honeypot', correct: false }
    ]
  },
  {
    question: 'Malicious software collecting information about users without their knowledge/consent is known as:',
    answers: [
      { text: 'Spyware', correct: true },
      { text: 'Crypto-malware', correct: false },
      { text: 'Bot', correct: false },
      { text: 'Adware', correct: false }
    ]
  },
  {
    question: 'A virus that is designed to avoid discovery by attacking the virus signatures or the antivirus program attempting to detect it.',
    answers: [
      { text: 'Logic Bomb', correct: false },
      { text: 'Retrovirus', correct: true },
      { text: 'DDoS', correct: false },
      { text: 'Ransomeware', correct: false }
    ]
  },
  {
    question: 'A type of malware that injects Trojans, viruses, worms and other malware into a computer. When run, it typically decompresses the malware components hidden within the file and executes them, sometimes without saving them on disk to avoid detection.',
    answers: [
      { text: 'Logic Bomb', correct: false },
      { text: 'Retrovirus', correct: false },
      { text: 'Dropper', correct: true },
      { text: 'Smurf', correct: false }
    ]
  },
  {
    question: "A type of DDoS attack in which large numbers of ICMP packets with the intended victim's spoofed source IP are broadcast to a computer network using an IP broadcast address",
    answers: [
      { text: 'XMAS Attack', correct: false },
      { text: 'Retrovirus', correct: false },
      { text: 'Dropper', correct: false },
      { text: 'Smurf', correct: true }
    ]
  },
  {
    question: "A well known attack that is designed to send a very specifically crafted TCP packet to a device on the network. Flags in the TCP header are turned on or turned off, depending on what the packet is doing. This can slow down the device or be used in reconnaissance.",
    answers: [
      { text: 'XMAS Attack', correct: true },
      { text: 'Dropper', correct: false },
      { text: 'Poodle Attack', correct: false },
      { text: 'Smurf', correct: false }
    ]
  }
]
